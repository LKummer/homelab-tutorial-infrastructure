stages:
  - validate
  - build
  - deploy

variables:
  TF_ROOT: terraform
  TF_PLAN: plan.cache
  TF_STATE_NAME: production
  PLAYBOOK_ROOT: playbook

# TODO pypi cache
cache:
  key: $TF_ROOT
  paths:
    - $TF_ROOT/.terraform/

.terraform:
  image: debian:bookworm-slim
  variables:
    TF_VERSION: 1.6.5
    TF_VAR_provisioning_authorized_keys: $SSH_PUBLIC_KEY
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    TF_HTTP_LOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock
    TF_HTTP_LOCK_METHOD: POST
    TF_HTTP_UNLOCK_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}/lock
    TF_HTTP_UNLOCK_METHOD: DELETE
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
    TF_HTTP_RETRY_WAIT_MIN: 5
  before_script:
    - apt-get update
    - apt-get install --yes wget unzip git jq
    - wget -O /tmp/terraform.zip https://releases.hashicorp.com/terraform/${TF_VERSION}/terraform_${TF_VERSION}_linux_amd64.zip
    - cd "$TF_ROOT"
    - unzip /tmp/terraform.zip
    - mv terraform /usr/local/bin
    - terraform init

.ansible:
  image: python:3.12.0-slim-bookworm
  variables:
    ANSIBLE_HOST_KEY_CHECKING: '0'
    # Needed for inventory plugin.
    TF_HTTP_ADDRESS: ${CI_API_V4_URL}/projects/${CI_PROJECT_ID}/terraform/state/${TF_STATE_NAME}
    TF_HTTP_USERNAME: gitlab-ci-token
    TF_HTTP_PASSWORD: ${CI_JOB_TOKEN}
  before_script:
    - apt-get update
    - apt-get install --yes git
    - chmod 600 "$SSH_PRIVATE_KEY_FILE"
    - cd "$PLAYBOOK_ROOT"
    - pip install -r requirements.txt
    - ansible-galaxy install -r requirements.yaml

format-terraform:
  extends: .terraform
  stage: validate
  script:
    - terraform fmt -check

validate-terraform:
  extends: .terraform
  stage: validate
  script:
    - terraform validate

lint-ansible:
  extends: .ansible
  stage: validate
  script:
    - ansible-lint -P production

build-terraform:
  extends: .terraform
  stage: build
  environment:
    name: $TF_STATE_NAME
    action: prepare
  script:
    - terraform plan -input=false -out=$TF_PLAN
      # Generate a report for Gitlab merge requests.
      # https://docs.gitlab.com/ee/user/infrastructure/iac/mr_integration.html#configure-terraform-report-artifacts
    - terraform show --json "$TF_PLAN" | jq -r '([.resource_changes[]?.change.actions?]|flatten)|{"create":(map(select(.=="create"))|length),"update":(map(select(.=="update"))|length),"delete":(map(select(.=="delete"))|length)}' > plan.json
  artifacts:
    reports:
      terraform: $TF_ROOT/plan.json
    paths:
      - $TF_ROOT/$TF_PLAN

apply-terraform:
  extends: .terraform
  stage: deploy
  needs:
    - build-terraform
  environment:
    name: $TF_STATE_NAME
    action: start
    on_stop: destroy-terraform
  script:
    - terraform apply -input=false "$TF_PLAN"
  rules:
    - if: $CI_COMMIT_BRANCH == $CI_DEFAULT_BRANCH
      when: manual

apply-playbook:
  extends: .ansible
  stage: deploy
  needs:
    - apply-terraform
  environment:
    name: $TF_STATE_NAME
    action: prepare
  script:
    - ansible-playbook --key-file "$SSH_PRIVATE_KEY_FILE" --inventory=inventory main.yaml

destroy-terraform:
  extends: .terraform
  stage: deploy
  environment:
    name: $TF_STATE_NAME
    action: stop
  script:
    - terraform destroy -input=false -auto-approve
  when: manual
